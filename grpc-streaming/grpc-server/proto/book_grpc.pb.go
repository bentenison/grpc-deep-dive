// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpc-server/proto/book.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookService_ListBooks_FullMethodName                     = "/book.BookService/ListBooks"
	BookService_GetBook_FullMethodName                       = "/book.BookService/GetBook"
	BookService_CreateBook_FullMethodName                    = "/book.BookService/CreateBook"
	BookService_CreateSreamingBook_FullMethodName            = "/book.BookService/CreateSreamingBook"
	BookService_ListBooksStreaming_FullMethodName            = "/book.BookService/ListBooksStreaming"
	BookService_GetBookBidirectionalStreaming_FullMethodName = "/book.BookService/GetBookBidirectionalStreaming"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	ListBooks(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (*ListBookResponse, error)
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	// client streaming for createbook
	CreateSreamingBook(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateBookRequest, CreateBookResponse], error)
	// server streaming list books
	ListBooksStreaming(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error)
	// bidirectional streaming for get book
	GetBookBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetBookRequest, GetBookResponse], error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) ListBooks(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (*ListBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookResponse)
	err := c.cc.Invoke(ctx, BookService_ListBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, BookService_GetBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, BookService_CreateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) CreateSreamingBook(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateBookRequest, CreateBookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[0], BookService_CreateSreamingBook_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateBookRequest, CreateBookResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_CreateSreamingBookClient = grpc.ClientStreamingClient[CreateBookRequest, CreateBookResponse]

func (c *bookServiceClient) ListBooksStreaming(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[1], BookService_ListBooksStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListBookRequest, Book]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_ListBooksStreamingClient = grpc.ServerStreamingClient[Book]

func (c *bookServiceClient) GetBookBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetBookRequest, GetBookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[2], BookService_GetBookBidirectionalStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBookRequest, GetBookResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_GetBookBidirectionalStreamingClient = grpc.BidiStreamingClient[GetBookRequest, GetBookResponse]

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility.
type BookServiceServer interface {
	ListBooks(context.Context, *ListBookRequest) (*ListBookResponse, error)
	GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error)
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	// client streaming for createbook
	CreateSreamingBook(grpc.ClientStreamingServer[CreateBookRequest, CreateBookResponse]) error
	// server streaming list books
	ListBooksStreaming(*ListBookRequest, grpc.ServerStreamingServer[Book]) error
	// bidirectional streaming for get book
	GetBookBidirectionalStreaming(grpc.BidiStreamingServer[GetBookRequest, GetBookResponse]) error
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookServiceServer struct{}

func (UnimplementedBookServiceServer) ListBooks(context.Context, *ListBookRequest) (*ListBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedBookServiceServer) GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServiceServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) CreateSreamingBook(grpc.ClientStreamingServer[CreateBookRequest, CreateBookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateSreamingBook not implemented")
}
func (UnimplementedBookServiceServer) ListBooksStreaming(*ListBookRequest, grpc.ServerStreamingServer[Book]) error {
	return status.Errorf(codes.Unimplemented, "method ListBooksStreaming not implemented")
}
func (UnimplementedBookServiceServer) GetBookBidirectionalStreaming(grpc.BidiStreamingServer[GetBookRequest, GetBookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetBookBidirectionalStreaming not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}
func (UnimplementedBookServiceServer) testEmbeddedByValue()                     {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_ListBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ListBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ListBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ListBooks(ctx, req.(*ListBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_CreateSreamingBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServiceServer).CreateSreamingBook(&grpc.GenericServerStream[CreateBookRequest, CreateBookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_CreateSreamingBookServer = grpc.ClientStreamingServer[CreateBookRequest, CreateBookResponse]

func _BookService_ListBooksStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).ListBooksStreaming(m, &grpc.GenericServerStream[ListBookRequest, Book]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_ListBooksStreamingServer = grpc.ServerStreamingServer[Book]

func _BookService_GetBookBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServiceServer).GetBookBidirectionalStreaming(&grpc.GenericServerStream[GetBookRequest, GetBookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_GetBookBidirectionalStreamingServer = grpc.BidiStreamingServer[GetBookRequest, GetBookResponse]

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBooks",
			Handler:    _BookService_ListBooks_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookService_GetBook_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateSreamingBook",
			Handler:       _BookService_CreateSreamingBook_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListBooksStreaming",
			Handler:       _BookService_ListBooksStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBookBidirectionalStreaming",
			Handler:       _BookService_GetBookBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc-server/proto/book.proto",
}
